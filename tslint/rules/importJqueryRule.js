"use strict";
var __extends = (this && this.__extends) || function (d, b) {
    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    function __() { this.constructor = d; }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
};
var Lint = require("tslint/lib/lint");
var ts = require("typescript");
var Rule = (function (_super) {
    __extends(Rule, _super);
    function Rule() {
        return _super.apply(this, arguments) || this;
    }
    Rule.prototype.apply = function (sourceFile) {
        return this.applyWithWalker(new ImportJqueryWalker(sourceFile, this.getOptions()));
    };
    return Rule;
}(Lint.Rules.AbstractRule));
exports.Rule = Rule;
Rule.FAILURE_STRING = 'Do not use global jQuery.';
var ImportJqueryWalker = (function (_super) {
    __extends(ImportJqueryWalker, _super);
    function ImportJqueryWalker() {
        return _super.apply(this, arguments) || this;
    }
    ImportJqueryWalker.prototype.createBlockScope = function () {
        if (this.blockScopeStack) {
            return Object.create(this.getCurrentBlockScope());
        }
        else {
            return Object.create(null);
        }
    };
    ImportJqueryWalker.prototype.createScope = function () {
        if (this.scopeStack) {
            return Object.create(this.getCurrentScope());
        }
        else {
            return Object.create(null);
        }
    };
    ImportJqueryWalker.prototype.sawDollarSign = function () {
        return this.getCurrentBlockScope().dollarSign
            || this.getAllScopes().some(function (scope) { return scope.dollarSign; });
    };
    ImportJqueryWalker.prototype.sawJquery = function () {
        return this.getCurrentBlockScope().jQuery
            || this.getAllScopes().some(function (scope) { return scope.jQuery; });
    };
    ImportJqueryWalker.prototype.inspect = function (scope, text) {
        switch (text) {
            case '$':
                scope.dollarSign = true;
                break;
            case 'jQuery':
                scope.jQuery = true;
                break;
        }
    };
    ImportJqueryWalker.prototype.visitImportDeclaration = function (node) {
        var scope = this.getCurrentScope();
        var clause = node.importClause;
        // This is an import like "import 'foo';"
        if (!clause) {
            return;
        }
        // Default import
        if (clause.name) {
            this.inspect(scope, clause.name.getText());
        }
        var bindings = clause.namedBindings;
        if (!bindings) {
            return;
        }
        // import * as foo from 'module';
        if (bindings.kind === ts.SyntaxKind.NamespaceImport) {
            return this.inspect(scope, bindings.name.getText());
        }
        // import {...} from 'module';
        if (bindings.kind === ts.SyntaxKind.NamedImports) {
            for (var _i = 0, _a = bindings.elements; _i < _a.length; _i++) {
                var element = _a[_i];
                this.inspect(scope, element.name.getText());
            }
        }
    };
    ImportJqueryWalker.prototype.visitClassExpression = function (node) {
        var scope = this.getCurrentBlockScope();
        if (node.name) {
            this.inspect(scope, node.name.getText());
        }
        return _super.prototype.visitClassExpression.call(this, node);
    };
    ImportJqueryWalker.prototype.visitClassDeclaration = function (node) {
        var scope = Object.getPrototypeOf(this.getCurrentBlockScope());
        if (node.name) {
            this.inspect(scope, node.name.getText());
        }
        return _super.prototype.visitClassDeclaration.call(this, node);
    };
    ImportJqueryWalker.prototype.visitFunctionExpression = function (node) {
        if (node.name) {
            this.inspect(this.getCurrentScope(), node.name.getText());
        }
        return _super.prototype.visitFunctionExpression.call(this, node);
    };
    ImportJqueryWalker.prototype.visitFunctionDeclaration = function (node) {
        var scope = Object.getPrototypeOf(this.getCurrentScope());
        if (node.name) {
            this.inspect(scope, node.name.getText());
        }
        return _super.prototype.visitFunctionDeclaration.call(this, node);
    };
    ImportJqueryWalker.prototype.visitParameterDeclaration = function (node) {
        var scope = this.getCurrentScope();
        var name = node.name;
        if (name.kind === ts.SyntaxKind.Identifier) {
            // (name)
            this.inspect(scope, name.getText());
        }
        else {
            // ({name}) or ([name]) or ...
            this.inspectBindings(scope, name);
        }
    };
    ImportJqueryWalker.prototype.visitIdentifier = function (node) {
        var ident = node.getText(), isFailure = (ident === '$' && !this.sawDollarSign())
            || (ident === 'jQuery' && !this.sawJquery());
        if (isFailure) {
            this.addFailure(this.createFailure(node.getStart(), node.getWidth(), Rule.FAILURE_STRING));
        }
    };
    ImportJqueryWalker.prototype.visitVariableStatement = function (node) {
        var list = node.declarationList;
        var isBlockScoped = (list.flags & (ts.NodeFlags.Const | ts.NodeFlags.Let)) !== 0;
        var scope = isBlockScoped ? this.getCurrentBlockScope() : this.getCurrentScope();
        for (var _i = 0, _a = list.declarations; _i < _a.length; _i++) {
            var decl = _a[_i];
            this.inspectDeclaration(scope, decl);
        }
    };
    ImportJqueryWalker.prototype.visitMethodDeclaration = function (node) {
        for (var _i = 0, _a = node.parameters; _i < _a.length; _i++) {
            var param = _a[_i];
            this.visitNode(param);
        }
        if (node.body) {
            this.visitNode(node.body);
        }
    };
    ImportJqueryWalker.prototype.visitPropertyAssignment = function (node) {
        this.visitNode(node.initializer);
    };
    ImportJqueryWalker.prototype.visitPropertyAccessExpression = function (node) {
        this.visitNode(node.expression);
    };
    ImportJqueryWalker.prototype.visitPropertyDeclaration = function (node) {
        if (node.initializer) {
            _super.prototype.visitNode.call(this, node.initializer);
        }
    };
    ImportJqueryWalker.prototype.inspectBindings = function (scope, node) {
        for (var _i = 0, _a = node.elements; _i < _a.length; _i++) {
            var binding = _a[_i];
            if (binding.kind !== ts.SyntaxKind.OmittedExpression) {
                this.inspectBinding(scope, binding);
                if (binding.initializer) {
                    this.visitNode(binding.initializer);
                }
            }
        }
    };
    ImportJqueryWalker.prototype.inspectBinding = function (scope, node) {
        if (node.kind === ts.SyntaxKind.BindingElement) {
            var name_1 = node.name;
            if (name_1.kind === ts.SyntaxKind.Identifier) {
                this.inspect(scope, name_1.getText());
            }
            else {
                this.inspectBindings(scope, name_1);
            }
            if (node.initializer) {
                this.visitNode(node.initializer);
            }
        }
    };
    ImportJqueryWalker.prototype.inspectDeclaration = function (scope, node) {
        var name = node.name;
        if (name.kind === ts.SyntaxKind.Identifier) {
            this.inspect(scope, name.getText());
        }
        else {
            this.inspectBindings(scope, name);
        }
        if (node.initializer) {
            this.visitNode(node.initializer);
        }
    };
    return ImportJqueryWalker;
}(Lint.BlockScopeAwareRuleWalker));
//# sourceMappingURL=data:application/json;base64,