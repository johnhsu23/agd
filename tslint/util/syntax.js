"use strict";
var ts = require("typescript");
/*
 * Helper function for maximum type safety.
 *
 * Pros: avoids a type assertion.
 * Cons: adds a stack frame.
 *
 * Oh well.
 */
function isPropertyAccess(node) {
    return node.kind === ts.SyntaxKind.PropertyAccessExpression;
}
/*
 * Helper function: determine if the callee of this CallExpression is a reference to the named method.
 */
function isCallToMethod(node, method) {
    var callee = node.expression;
    if (!callee) {
        return false;
    }
    if (isPropertyAccess(callee)) {
        return callee.name.text === method;
    }
    // TODO: look for ["then"] access pattern
    return false;
}
/**
 * Is this call expression like <something>.done(...) ?
 */
function isCallToDone(node) {
    return isCallToMethod(node, 'done');
}
exports.isCallToDone = isCallToDone;
/**
 * Is this call expression like <something>.then(...) ?
 */
function isCallToThen(node) {
    return isCallToMethod(node, 'then');
}
exports.isCallToThen = isCallToThen;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic3ludGF4LmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsic3ludGF4LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7QUFBQSwrQkFBaUM7QUFFakM7Ozs7Ozs7R0FPRztBQUNILDBCQUEwQixJQUFhO0lBQ3JDLE1BQU0sQ0FBQyxJQUFJLENBQUMsSUFBSSxLQUFLLEVBQUUsQ0FBQyxVQUFVLENBQUMsd0JBQXdCLENBQUM7QUFDOUQsQ0FBQztBQUVEOztHQUVHO0FBQ0gsd0JBQXdCLElBQXVCLEVBQUUsTUFBYztJQUM3RCxJQUFNLE1BQU0sR0FBRyxJQUFJLENBQUMsVUFBVSxDQUFDO0lBRS9CLEVBQUUsQ0FBQyxDQUFDLENBQUMsTUFBTSxDQUFDLENBQUMsQ0FBQztRQUNaLE1BQU0sQ0FBQyxLQUFLLENBQUM7SUFDZixDQUFDO0lBRUQsRUFBRSxDQUFDLENBQUMsZ0JBQWdCLENBQUMsTUFBTSxDQUFDLENBQUMsQ0FBQyxDQUFDO1FBQzdCLE1BQU0sQ0FBQyxNQUFNLENBQUMsSUFBSSxDQUFDLElBQUksS0FBSyxNQUFNLENBQUM7SUFDckMsQ0FBQztJQUVELHlDQUF5QztJQUV6QyxNQUFNLENBQUMsS0FBSyxDQUFDO0FBQ2YsQ0FBQztBQUVEOztHQUVHO0FBQ0gsc0JBQTZCLElBQXVCO0lBQ2xELE1BQU0sQ0FBQyxjQUFjLENBQUMsSUFBSSxFQUFFLE1BQU0sQ0FBQyxDQUFDO0FBQ3RDLENBQUM7QUFGRCxvQ0FFQztBQUVEOztHQUVHO0FBQ0gsc0JBQTZCLElBQXVCO0lBQ2xELE1BQU0sQ0FBQyxjQUFjLENBQUMsSUFBSSxFQUFFLE1BQU0sQ0FBQyxDQUFDO0FBQ3RDLENBQUM7QUFGRCxvQ0FFQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCAqIGFzIHRzIGZyb20gJ3R5cGVzY3JpcHQnO1xuXG4vKlxuICogSGVscGVyIGZ1bmN0aW9uIGZvciBtYXhpbXVtIHR5cGUgc2FmZXR5LlxuICpcbiAqIFByb3M6IGF2b2lkcyBhIHR5cGUgYXNzZXJ0aW9uLlxuICogQ29uczogYWRkcyBhIHN0YWNrIGZyYW1lLlxuICpcbiAqIE9oIHdlbGwuXG4gKi9cbmZ1bmN0aW9uIGlzUHJvcGVydHlBY2Nlc3Mobm9kZTogdHMuTm9kZSk6IG5vZGUgaXMgdHMuUHJvcGVydHlBY2Nlc3NFeHByZXNzaW9uIHtcbiAgcmV0dXJuIG5vZGUua2luZCA9PT0gdHMuU3ludGF4S2luZC5Qcm9wZXJ0eUFjY2Vzc0V4cHJlc3Npb247XG59XG5cbi8qXG4gKiBIZWxwZXIgZnVuY3Rpb246IGRldGVybWluZSBpZiB0aGUgY2FsbGVlIG9mIHRoaXMgQ2FsbEV4cHJlc3Npb24gaXMgYSByZWZlcmVuY2UgdG8gdGhlIG5hbWVkIG1ldGhvZC5cbiAqL1xuZnVuY3Rpb24gaXNDYWxsVG9NZXRob2Qobm9kZTogdHMuQ2FsbEV4cHJlc3Npb24sIG1ldGhvZDogc3RyaW5nKTogYm9vbGVhbiB7XG4gIGNvbnN0IGNhbGxlZSA9IG5vZGUuZXhwcmVzc2lvbjtcblxuICBpZiAoIWNhbGxlZSkge1xuICAgIHJldHVybiBmYWxzZTtcbiAgfVxuXG4gIGlmIChpc1Byb3BlcnR5QWNjZXNzKGNhbGxlZSkpIHtcbiAgICByZXR1cm4gY2FsbGVlLm5hbWUudGV4dCA9PT0gbWV0aG9kO1xuICB9XG5cbiAgLy8gVE9ETzogbG9vayBmb3IgW1widGhlblwiXSBhY2Nlc3MgcGF0dGVyblxuXG4gIHJldHVybiBmYWxzZTtcbn1cblxuLyoqXG4gKiBJcyB0aGlzIGNhbGwgZXhwcmVzc2lvbiBsaWtlIDxzb21ldGhpbmc+LmRvbmUoLi4uKSA/XG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBpc0NhbGxUb0RvbmUobm9kZTogdHMuQ2FsbEV4cHJlc3Npb24pOiBib29sZWFuIHtcbiAgcmV0dXJuIGlzQ2FsbFRvTWV0aG9kKG5vZGUsICdkb25lJyk7XG59XG5cbi8qKlxuICogSXMgdGhpcyBjYWxsIGV4cHJlc3Npb24gbGlrZSA8c29tZXRoaW5nPi50aGVuKC4uLikgP1xuICovXG5leHBvcnQgZnVuY3Rpb24gaXNDYWxsVG9UaGVuKG5vZGU6IHRzLkNhbGxFeHByZXNzaW9uKTogYm9vbGVhbiB7XG4gIHJldHVybiBpc0NhbGxUb01ldGhvZChub2RlLCAndGhlbicpO1xufVxuIl19